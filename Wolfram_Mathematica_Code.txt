(*Parameters*)numParticles = 200;  (*Number of particles*)
horizontalSize = 300;  (*Horizontal expanse of the space*)
verticalSize = horizontalSize;  (*Vertical expanse of the space*)
particleRadius = 4.;  (*Radius of the particles for display*)
minDistance = 2*particleRadius;  (*Minimum distance between particles*)
initialMoveDistance = 20;  (*Initial movement distance*)
epochInterval = 100;  (*Interval after which move distance decreases*)
distanceDropFactor = 1.01;  (*Factor by which move distance decreases*)
lowerBoundMoveDistance = 
  particleRadius;  (*Adjustable lower bound for move distance*)
distanceIncreaseProbability = 
  0.1;  (*Probability for accepting moves with increased distance*)
displayUpdateInterval = 
  0.001;  (*Animation speed:Smaller->faster updates*)
maxEpochs = 10^8  ;  (*Total epochs before stopping*)

(*Initialize particles with positions ensuring minimum distance*)
initializeParticles[numParticles_, minDistance_, hSize_, vSize_] := 
  Module[{positions = {}, candidate, isValid}, 
   While[Length[positions] < numParticles, 
    candidate = 
     RandomReal[{0, hSize}, 1]~Join~
      RandomReal[{0, vSize}, 
       1];(*Random position within bounds*)(*Check if the candidate \
satisfies the minimum distance condition*)
    isValid = 
     AllTrue[positions, (#[[1]] - candidate[[1]])^2 + (#[[2]] - 
            candidate[[2]])^2 >= minDistance^2 &];
    If[isValid, AppendTo[positions, candidate]];];
   positions];

(*Function to compute cumulative squared distance*)
totalSquaredDistance[positions_] := 
  Total[(#[[1, 1]] - #[[2, 1]])^2 + (#[[1, 2]] - #[[2, 2]])^2 & /@ 
    Subsets[positions, {2}]];

(*Function to check if any particle is too close*)
tooClose[particle_, others_, minDistance_] := 
  AnyTrue[others, (#[[1]] - particle[[1]])^2 + (#[[2]] - 
         particle[[2]])^2 < minDistance^2 &];

(*Function to attempt moving one particle*)
moveParticle[particles_, moveDistance_, minDistance_, currentIndex_, 
   currentAngle_] := 
  Module[{proposedPosition, currentDistance, newDistance, 
    validMove = False, 
    newParticles = particles},(*Compute the proposed new position*)
   proposedPosition = 
    particles[[currentIndex]] + 
     moveDistance*{Cos[currentAngle Degree], Sin[currentAngle Degree]};
   (*Compute cumulative squared distances for current and proposed \
positions*)currentDistance = totalSquaredDistance[particles];
   newParticles[[currentIndex]] = proposedPosition;(*Temporarily move*)
   newDistance = totalSquaredDistance[newParticles];
   (*Check if the move is valid*)
   If[! tooClose[proposedPosition, Delete[newParticles, currentIndex],
       minDistance],(*Ensure distance constraints are satisfied*)
    If[newDistance <= currentDistance || 
      RandomReal[] <= 
       distanceIncreaseProbability,(*Check cumulative distance \
criterion with probability*)
     validMove = True,(*Accept the move if conditions met*)
     newParticles = 
      particles],(*Revert the temporary move if invalid cumulative \
distance*)
    newParticles = 
     particles];(*Revert the temporary move if any distance criterion \
fails*){newParticles, 
    validMove}  (*Return updated particles and whether the move \
succeeded*)];

(*Function to draw the particles*)
drawParticles[positions_, hSize_, vSize_, particleRadius_] := 
  Graphics[Table[{Red, Disk[pos, particleRadius]}, {pos, positions}], 
   PlotRange -> {{-1, hSize + 1}, {-1, 
      vSize + 1}},(*Adjust plot range for visibility*)Axes -> True, 
   AxesOrigin -> {0, 0}, AxesStyle -> LightGray, ImageSize -> 400, 
   AspectRatio -> vSize/hSize];

(*Real-time automatic evolution with cleanup*)
DynamicModule[{particles, epoch = 0, finished = False, validMoves = 0,
   invalidMoves = 0, currentMoveDistance = initialMoveDistance, 
  currentIndex, 
  currentAngle},(*Step 1:Initialize particles ensuring minimum \
distance*)
 particles = 
  initializeParticles[numParticles, minDistance, horizontalSize, 
   verticalSize];
 currentIndex = 
  RandomInteger[{1, numParticles}];(*Initial random particle*)
 currentAngle = 
  RandomReal[{0, 
    360}];(*Initial random direction*)(*Step 2:Dynamic loop for \
automatic updates*)
 Column[{Dynamic[
    Row[{"Epoch: ", epoch, " | Valid Moves: ", validMoves, 
      " | Invalid Moves: ", invalidMoves, 
      " | Current Move Distance: ", 
      NumberForm[currentMoveDistance, {4, 2}], 
      " | Current Particle: ", currentIndex, " | Current Angle: ", 
      NumberForm[currentAngle, {3, 2}]}], 
    TrackedSymbols :> {epoch, validMoves, invalidMoves, 
      currentMoveDistance, currentIndex, currentAngle}], 
   Dynamic[If[
     epoch <= 
      maxEpochs,(*Total epochs before stopping*)(*Animation in \
progress*)
     Refresh[(*Adjust move distance after every epochInterval*)
      If[Mod[epoch, epochInterval] == 0 && epoch > 0, 
       currentMoveDistance = 
        Max[currentMoveDistance/distanceDropFactor, 
         lowerBoundMoveDistance]];(*Enforce lower bound*)(*Attempt to \
move a particle*)
      Module[{result}, 
       result = 
        moveParticle[particles, currentMoveDistance, minDistance, 
         currentIndex, currentAngle];
       particles = 
        result[[1]];(*Update particles*)(*Track move success/failure*)
       If[result[[2]], validMoves++, invalidMoves++;
        currentIndex = RandomInteger[{1, numParticles}];
        currentAngle = 
         RandomReal[{0, 360}]  (*New angle on invalid move*)];];
      (*Increment epoch counter*)epoch++;
      (*Draw the particles*)
      drawParticles[particles, horizontalSize, verticalSize, 
       particleRadius], 
      UpdateInterval -> 
       displayUpdateInterval],(*Adjustable parameter for update \
frequency*)(*Animation complete:Cleanup*)
     If[! finished, finished = True;
      Pause[1];(*Short delay before quitting*)
      Print["Simulation Complete. Quitting Kernel..."];
      ClearAll["Global`*"];(*Clear all global variables*)
      FrontEndTokenExecute["QuitKernel"]]]]}]]